# -*- coding: utf-8 -*-
"""Aplica√ß√£o Streamlit com m√∫ltiplas p√°ginas para processamento de XML:
1. Extrair Tags (com filtro opcional)
2. Consolidar Faturas por UF
"""

import streamlit as st
import pandas as pd
from xml_parser import process_files, consolidate_faturas_by_uf # Importa ambas as fun√ß√µes
import io
import datetime

st.set_page_config(layout="wide", page_title="Processador XML Fiscal")

# --- Defini√ß√£o das P√°ginas --- 
def page_extract_tags():
    st.title("üîé Ferramenta de Extra√ß√£o de Dados XML (com Filtro Opcional)")
    st.markdown("""
    Carregue arquivos XML, extraia valores de uma tag espec√≠fica e, opcionalmente,
    filtre os resultados com base no valor de outra tag dentro de um mesmo elemento ancestral comum.
    """)

    # --- Upload de Arquivos ---
    st.header("1. Carregue seus arquivos XML")
    uploaded_files = st.file_uploader(
        "Selecione um ou mais arquivos XML para extra√ß√£o",
        type=["xml"],
        accept_multiple_files=True,
        key="uploader_extracao", # Chave √∫nica para este uploader
        help="Voc√™ pode selecionar m√∫ltiplos arquivos. O limite de upload est√° ajustado para arquivos grandes."
    )

    # --- Input da Tag Alvo ---
    st.header("2. Informe a Tag Alvo")
    tag_name = st.text_input(
        "Nome da Tag Alvo",
        placeholder="Ex: nNF, dhEmi, CNPJ",
        key="tag_alvo_extracao",
        help="Digite o nome exato da tag XML cujo valor voc√™ deseja extrair (sem < >)."
    )

    # --- Filtro Opcional ---
    st.header("3. Filtro (Opcional)")
    st.markdown("Preencha os campos abaixo *apenas* se desejar extrair a Tag Alvo condicionalmente.")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        parent_tag = st.text_input(
            "Tag Ancestral Comum (Contexto)",
            placeholder="Ex: infNFCom, ide, emit",
            key="parent_tag_extracao",
            help="Tag ancestral comum que cont√©m *tanto* a tag de filtro quanto a tag alvo (mesmo que em n√≠veis diferentes). Ex: infNFCom, registro. Deixe em branco se n√£o for filtrar."
        )
    with col2:
        filter_tag = st.text_input(
            "Tag de Filtro",
            placeholder="Ex: cUF, UF, tpAmb",
            key="filter_tag_extracao",
            help="Tag usada como condi√ß√£o para o filtro. Deixe em branco se n√£o for filtrar."
        )
    with col3:
        filter_value = st.text_input(
            "Valor do Filtro",
            placeholder="Ex: 31, SP, 1",
            key="filter_value_extracao",
            help="Valor que a Tag de Filtro deve ter. Deixe em branco se n√£o for filtrar."
        )

    # --- Bot√£o de Processamento e Resultados ---
    st.header("4. Processe e veja os resultados")
    if st.button("Extrair Dados", type="primary", key="btn_extracao"):
        if not uploaded_files:
            st.error("Por favor, carregue pelo menos um arquivo XML.")
        elif not tag_name:
            st.error("Por favor, informe o nome da Tag Alvo.")
        else:
            is_filtering = bool(parent_tag and filter_tag and filter_value)
            filter_info_for_spinner = f" com filtro `{filter_tag}`=`{filter_value}` no contexto `{parent_tag}`" if is_filtering else ""

            with st.spinner(f"Processando arquivos e buscando pela tag `{tag_name}`{filter_info_for_spinner}... Isso pode levar alguns minutos."):
                results_list = process_files(
                    files=uploaded_files,
                    tag_name=tag_name,
                    parent_tag=parent_tag if is_filtering else None,
                    filter_tag=filter_tag if is_filtering else None,
                    filter_value=filter_value if is_filtering else None
                )

            if results_list:
                st.success("Processamento conclu√≠do!")
                df_results = pd.DataFrame(results_list)
                df_results = df_results[["Nome do Arquivo", "TAG", "Filtro", "Valor", "Ocorr√™ncia"]]
                st.dataframe(df_results, use_container_width=True)

                st.subheader("Download dos Resultados")
                @st.cache_data
                def convert_df_to_csv(df):
                    output = io.StringIO()
                    df.to_csv(output, index=False, encoding="utf-8")
                    return output.getvalue()

                csv_data = convert_df_to_csv(df_results)
                csv_filename = f"extracao_{tag_name}_filtrado.csv" if is_filtering else f"extracao_{tag_name}.csv"
                st.download_button(
                    label="Baixar resultados como CSV",
                    data=csv_data,
                    file_name=csv_filename,
                    mime="text/csv",
                    key="download_csv_extracao"
                )
            else:
                st.warning("Nenhum resultado encontrado ou ocorreu um erro. Verifique os arquivos, a tag e os crit√©rios de filtro.")

def page_consolidate_faturas():
    st.title("üìÑ Ferramenta de Consolida√ß√£o de Faturas por UF")
    st.markdown("""
    Carregue um ou mais arquivos XML contendo blocos `<Fatura>`. A ferramenta ir√° encontrar
    todas as Faturas onde a tag `<UF>` (dentro de `<enderEmit>`) corresponda ao valor informado
    e criar√° um novo arquivo XML `<loteNFCom>` contendo apenas essas faturas.
    """)

    # --- Upload de Arquivos ---
    st.header("1. Carregue os arquivos XML de origem")
    uploaded_files_consolidacao = st.file_uploader(
        "Selecione um ou mais arquivos XML para consolida√ß√£o",
        type=["xml"],
        accept_multiple_files=True,
        key="uploader_consolidacao", # Chave √∫nica
        help="Voc√™ pode selecionar m√∫ltiplos arquivos que contenham as Faturas."
    )

    # --- Inputs para Consolida√ß√£o ---
    st.header("2. Informe os par√¢metros para consolida√ß√£o")
    col1_cons, col2_cons = st.columns(2)
    with col1_cons:
        target_uf = st.text_input(
            "UF para Filtrar",
            placeholder="Ex: SP, MG, RJ",
            key="uf_consolidacao",
            help="Digite a sigla da UF (ex: SP) para incluir apenas as Faturas dessa UF."
        )
    with col2_cons:
        numero_lote = st.text_input(
            "N√∫mero do Lote",
            placeholder="Ex: 0000000430",
            key="lote_consolidacao",
            help="Digite o n√∫mero que ser√° usado no atributo NUMERO_LOTE do arquivo consolidado."
        )

    # --- Bot√£o de Processamento e Download ---
    st.header("3. Gere o arquivo consolidado")
    if st.button("Consolidar Faturas", type="primary", key="btn_consolidacao"):
        if not uploaded_files_consolidacao:
            st.error("Por favor, carregue pelo menos um arquivo XML de origem.")
        elif not target_uf:
            st.error("Por favor, informe a UF para filtrar as faturas.")
        elif not numero_lote:
            st.error("Por favor, informe o N√∫mero do Lote para o arquivo consolidado.")
        else:
            with st.spinner(f"Processando arquivos e consolidando Faturas da UF '{target_uf}'... Isso pode levar alguns minutos."):
                consolidated_xml_str, fatura_count = consolidate_faturas_by_uf(
                    files=uploaded_files_consolidacao,
                    target_uf=target_uf.upper(), # Garante que a UF seja mai√∫scula para compara√ß√£o
                    numero_lote=numero_lote
                )
            
            if consolidated_xml_str and fatura_count > 0:
                st.success(f"Consolida√ß√£o conclu√≠da! {fatura_count} fatura(s) da UF '{target_uf}' foram encontradas e agrupadas.")
                
                st.subheader("Download do Arquivo Consolidado")
                st.download_button(
                    label=f"Baixar lote_{numero_lote}_{target_uf}.xml",
                    data=consolidated_xml_str,
                    file_name=f"lote_{numero_lote}_{target_uf}.xml",
                    mime="application/xml",
                    key="download_xml_consolidado"
                )
                
                # Opcional: Mostrar pr√©via do XML gerado (pode ser lento/grande)
                # with st.expander("Pr√©via do XML Consolidado (in√≠cio)"):
                #     st.code(consolidated_xml_str[:2000] + "...", language="xml")
                    
            elif fatura_count == 0:
                st.warning(f"Nenhuma fatura encontrada para a UF '{target_uf}' nos arquivos fornecidos.")
            else: # Erro
                st.error("Ocorreu um erro durante a consolida√ß√£o. Verifique os logs ou os arquivos de entrada.")

# --- Navega√ß√£o Principal (Sidebar) ---
st.sidebar.title("Menu de Ferramentas")
page = st.sidebar.radio("Escolha a ferramenta:", ("Extrair Tags", "Consolidar Faturas por UF"))

st.sidebar.markdown("--- ")
st.sidebar.caption("Desenvolvido com Python e Streamlit.")

# --- Executa a p√°gina selecionada ---
if page == "Extrair Tags":
    page_extract_tags()
elif page == "Consolidar Faturas por UF":
    page_consolidate_faturas()

